;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 8/29/2018 8:33:42 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x293C      	GOTO       316
_interrupt:
0x0004	0x018A      	CLRF       PCLATH
0x0005	0x0183      	CLRF       STATUS
;F2L.c,84 :: 		void interrupt(void)
;F2L.c,87 :: 		if (PIR2.C1IF)
0x0006	0x0020      	MOVLB      0
0x0007	0x1E92      	BTFSS      PIR2, 5
0x0008	0x280D      	GOTO       L_interrupt0
;F2L.c,89 :: 		pulse_count++;
0x0009	0x0AA2      	INCF       F2L_pulse_count, 1
0x000A	0x1903      	BTFSC      STATUS, 2
0x000B	0x0AA3      	INCF       F2L_pulse_count+1, 1
;F2L.c,91 :: 		PIR2.C1IF = 0;
0x000C	0x1292      	BCF        PIR2, 5
;F2L.c,92 :: 		}
L_interrupt0:
;F2L.c,93 :: 		}
L_end_interrupt:
L__interrupt41:
0x000D	0x0009      	RETFIE     %s
; end of _interrupt
_Delay_22us:
;__Lib_Delays.c,15 :: 		void Delay_22us() {
;__Lib_Delays.c,16 :: 		Delay_us(22);
0x000E	0x303A      	MOVLW      58
0x000F	0x00FD      	MOVWF      R13
L_Delay_22us2:
0x0010	0x0BFD      	DECFSZ     R13, 1
0x0011	0x2810      	GOTO       L_Delay_22us2
0x0012	0x0000      	NOP
;__Lib_Delays.c,17 :: 		}
L_end_Delay_22us:
0x0013	0x0008      	RETURN
; end of _Delay_22us
_UART1_Tx_Idle:
;__Lib_UART_c45.c,48 :: 		
;__Lib_UART_c45.c,49 :: 		
0x0014	0x3000      	MOVLW      0
0x0015	0x0023      	MOVLB      3
0x0016	0x189E      	BTFSC      TXSTA, 1
0x0017	0x3001      	MOVLW      1
0x0018	0x00F0      	MOVWF      R0
;__Lib_UART_c45.c,50 :: 		
L_end_UART1_Tx_Idle:
0x0019	0x0008      	RETURN
; end of _UART1_Tx_Idle
_UART1_Write:
;__Lib_UART_c45.c,54 :: 		
;__Lib_UART_c45.c,55 :: 		
L_UART1_Write3:
0x001A	0x0023      	MOVLB      3
0x001B	0x189E      	BTFSC      TXSTA, 1
0x001C	0x281F      	GOTO       L_UART1_Write4
;__Lib_UART_c45.c,56 :: 		
0x001D	0x0000      	NOP
0x001E	0x281A      	GOTO       L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c45.c,57 :: 		
0x001F	0x0020      	MOVLB      0
0x0020	0x0846      	MOVF       FARG_UART1_Write_data_, 0
0x0021	0x0023      	MOVLB      3
0x0022	0x009A      	MOVWF      TXREG
;__Lib_UART_c45.c,58 :: 		
L_end_UART1_Write:
0x0023	0x0008      	RETURN
; end of _UART1_Write
_ADC_Get_Sample:
;__Lib_ADC.c,27 :: 		
;__Lib_ADC.c,28 :: 		
0x0024	0x3083      	MOVLW      131
0x0025	0x0021      	MOVLB      1
0x0026	0x059D      	ANDWF      ADCON0, 1
;__Lib_ADC.c,29 :: 		
0x0027	0x0020      	MOVLB      0
0x0028	0x0845      	MOVF       FARG_ADC_Get_Sample_channel, 0
0x0029	0x00F0      	MOVWF      R0
0x002A	0x35F0      	LSLF       R0, 1
0x002B	0x35F0      	LSLF       R0, 1
0x002C	0x0870      	MOVF       R0, 0
0x002D	0x0021      	MOVLB      1
0x002E	0x049D      	IORWF       ADCON0, 1
;__Lib_ADC.c,32 :: 		
0x002F	0x200E      	CALL       _Delay_22us
;__Lib_ADC.c,35 :: 		
0x0030	0x149D      	BSF        GO_NOT_DONE_bit, 1
;__Lib_ADC.c,38 :: 		
L_ADC_Get_Sample0:
0x0031	0x1C9D      	BTFSS      GO_NOT_DONE_bit, 1
0x0032	0x2834      	GOTO       L_ADC_Get_Sample1
;__Lib_ADC.c,39 :: 		
0x0033	0x2831      	GOTO       L_ADC_Get_Sample0
L_ADC_Get_Sample1:
;__Lib_ADC.c,41 :: 		
0x0034	0x081C      	MOVF       ADRESH, 0
0x0035	0x00F1      	MOVWF      R1
0x0036	0x01F0      	CLRF       R0
0x0037	0x081B      	MOVF       ADRESL, 0
0x0038	0x04F0      	IORWF       R0, 1
0x0039	0x3000      	MOVLW      0
0x003A	0x04F1      	IORWF       R1, 1
;__Lib_ADC.c,42 :: 		
L_end_ADC_Get_Sample:
0x003B	0x0008      	RETURN
; end of _ADC_Get_Sample
_ADC_Init:
;__Lib_ADC.c,19 :: 		
;__Lib_ADC.c,20 :: 		
0x003C	0x3024      	MOVLW      _ADC_Get_Sample
0x003D	0x0020      	MOVLB      0
0x003E	0x00BA      	MOVWF      _ADC_Get_Sample_Ptr
0x003F	0x3000      	MOVLW      hi_addr(_ADC_Get_Sample)
0x0040	0x00BB      	MOVWF      _ADC_Get_Sample_Ptr+1
0x0041	0x3045      	MOVLW      FARG_ADC_Get_Sample_channel
0x0042	0x00BC      	MOVWF      _ADC_Get_Sample_Ptr+2
0x0043	0x3000      	MOVLW      hi_addr(FARG_ADC_Get_Sample_channel)
0x0044	0x00BD      	MOVWF      _ADC_Get_Sample_Ptr+3
;__Lib_ADC.c,21 :: 		
0x0045	0x30F0      	MOVLW      240
0x0046	0x0021      	MOVLB      1
0x0047	0x009E      	MOVWF      ADCON1
;__Lib_ADC.c,22 :: 		
0x0048	0x019D      	CLRF       ADCON0
;__Lib_ADC.c,23 :: 		
0x0049	0x141D      	BSF        ADON_bit, 0
;__Lib_ADC.c,24 :: 		
L_end_ADC_Init:
0x004A	0x0008      	RETURN
; end of _ADC_Init
_sendchar:
;F2L.c,113 :: 		void sendchar( char c)
;F2L.c,116 :: 		while (!UART1_Tx_Idle())
L_sendchar3:
0x004B	0x2014      	CALL       _UART1_Tx_Idle
0x004C	0x0870      	MOVF       R0, 0
0x004D	0x1D03      	BTFSS      STATUS, 2
0x004E	0x2859      	GOTO       L_sendchar4
;F2L.c,118 :: 		Delay_us(100);
0x004F	0x3002      	MOVLW      2
0x0050	0x00FC      	MOVWF      R12
0x0051	0x3008      	MOVLW      8
0x0052	0x00FD      	MOVWF      R13
L_sendchar5:
0x0053	0x0BFD      	DECFSZ     R13, 1
0x0054	0x2853      	GOTO       L_sendchar5
0x0055	0x0BFC      	DECFSZ     R12, 1
0x0056	0x2853      	GOTO       L_sendchar5
0x0057	0x0000      	NOP
;F2L.c,119 :: 		}
0x0058	0x284B      	GOTO       L_sendchar3
L_sendchar4:
;F2L.c,120 :: 		UART1_Write(c);
0x0059	0x0020      	MOVLB      0
0x005A	0x0845      	MOVF       FARG_sendchar_c, 0
0x005B	0x00C6      	MOVWF      FARG_UART1_Write_data_
0x005C	0x201A      	CALL       _UART1_Write
;F2L.c,123 :: 		}
L_end_sendchar:
0x005D	0x0008      	RETURN
; end of _sendchar
_sendhex:
;F2L.c,128 :: 		void sendhex (unsigned long hexnumber, unsigned char cr )
;F2L.c,131 :: 		int nibble = 0;
0x005E	0x0020      	MOVLB      0
0x005F	0x01C3      	CLRF       sendhex_nibble_L0
0x0060	0x01C4      	CLRF       sendhex_nibble_L0+1
;F2L.c,134 :: 		for (nibble = 0; nibble < 6; nibble++)
0x0061	0x01C3      	CLRF       sendhex_nibble_L0
0x0062	0x01C4      	CLRF       sendhex_nibble_L0+1
L_sendhex6:
0x0063	0x3080      	MOVLW      128
0x0064	0x0644      	XORWF      sendhex_nibble_L0+1, 0
0x0065	0x00F0      	MOVWF      R0
0x0066	0x3080      	MOVLW      128
0x0067	0x0270      	SUBWF      R0, 0
0x0068	0x1D03      	BTFSS      STATUS, 2
0x0069	0x286C      	GOTO       L__sendhex46
0x006A	0x3006      	MOVLW      6
0x006B	0x0243      	SUBWF      sendhex_nibble_L0, 0
L__sendhex46:
0x006C	0x1803      	BTFSC      STATUS, 0
0x006D	0x28A7      	GOTO       L_sendhex7
;F2L.c,136 :: 		sendchar(hexnr[(hexnumber&0xF00000)>>20]);
0x006E	0x3000      	MOVLW      0
0x006F	0x053E      	ANDWF      FARG_sendhex_hexnumber, 0
0x0070	0x00F5      	MOVWF      R5
0x0071	0x3000      	MOVLW      0
0x0072	0x053F      	ANDWF      FARG_sendhex_hexnumber+1, 0
0x0073	0x00F6      	MOVWF      R6
0x0074	0x30F0      	MOVLW      240
0x0075	0x0540      	ANDWF      FARG_sendhex_hexnumber+2, 0
0x0076	0x00F7      	MOVWF      R7
0x0077	0x3000      	MOVLW      0
0x0078	0x0541      	ANDWF      FARG_sendhex_hexnumber+3, 0
0x0079	0x00F8      	MOVWF      R8
0x007A	0x3014      	MOVLW      20
0x007B	0x00F4      	MOVWF      R4
0x007C	0x0875      	MOVF       R5, 0
0x007D	0x00F0      	MOVWF      R0
0x007E	0x0876      	MOVF       R6, 0
0x007F	0x00F1      	MOVWF      R1
0x0080	0x0877      	MOVF       R7, 0
0x0081	0x00F2      	MOVWF      R2
0x0082	0x0878      	MOVF       R8, 0
0x0083	0x00F3      	MOVWF      R3
0x0084	0x0874      	MOVF       R4, 0
L__sendhex47:
0x0085	0x1903      	BTFSC      STATUS, 2
0x0086	0x288D      	GOTO       L__sendhex48
0x0087	0x36F3      	LSRF       R3, 1
0x0088	0x0CF2      	RRF        R2, 1
0x0089	0x0CF1      	RRF        R1, 1
0x008A	0x0CF0      	RRF        R0, 1
0x008B	0x3EFF      	ADDLW      255
0x008C	0x2885      	GOTO       L__sendhex47
L__sendhex48:
0x008D	0x30B8      	MOVLW      sendhex_hexnr_L0
0x008E	0x0770      	ADDWF      R0, 0
0x008F	0x0084      	MOVWF      FSR0
0x0090	0x3082      	MOVLW      hi_addr(sendhex_hexnr_L0)
0x0091	0x3D71      	ADDWFC     R1, 0
0x0092	0x0085      	MOVWF      FSR0H
0x0093	0x0800      	MOVF       INDF0, 0
0x0094	0x00C5      	MOVWF      FARG_sendchar_c
0x0095	0x204B      	CALL       _sendchar
;F2L.c,137 :: 		hexnumber<<=4;
0x0096	0x3004      	MOVLW      4
0x0097	0x00F0      	MOVWF      R0
0x0098	0x0870      	MOVF       R0, 0
L__sendhex49:
0x0099	0x1903      	BTFSC      STATUS, 2
0x009A	0x28A2      	GOTO       L__sendhex50
0x009B	0x0020      	MOVLB      0
0x009C	0x35BE      	LSLF       FARG_sendhex_hexnumber, 1
0x009D	0x0DBF      	RLF        FARG_sendhex_hexnumber+1, 1
0x009E	0x0DC0      	RLF        FARG_sendhex_hexnumber+2, 1
0x009F	0x0DC1      	RLF        FARG_sendhex_hexnumber+3, 1
0x00A0	0x3EFF      	ADDLW      255
0x00A1	0x2899      	GOTO       L__sendhex49
L__sendhex50:
0x00A2	0x0020      	MOVLB      0
;F2L.c,134 :: 		for (nibble = 0; nibble < 6; nibble++)
0x00A3	0x0AC3      	INCF       sendhex_nibble_L0, 1
0x00A4	0x1903      	BTFSC      STATUS, 2
0x00A5	0x0AC4      	INCF       sendhex_nibble_L0+1, 1
;F2L.c,138 :: 		}
0x00A6	0x2863      	GOTO       L_sendhex6
L_sendhex7:
;F2L.c,139 :: 		if (cr == LINE_CR_LF )
0x00A7	0x0842      	MOVF       FARG_sendhex_cr, 0
0x00A8	0x3A02      	XORLW      2
0x00A9	0x1D03      	BTFSS      STATUS, 2
0x00AA	0x28B3      	GOTO       L_sendhex9
;F2L.c,141 :: 		sendchar('\r');
0x00AB	0x300D      	MOVLW      13
0x00AC	0x00C5      	MOVWF      FARG_sendchar_c
0x00AD	0x204B      	CALL       _sendchar
;F2L.c,142 :: 		sendchar('\n');
0x00AE	0x300A      	MOVLW      10
0x00AF	0x0020      	MOVLB      0
0x00B0	0x00C5      	MOVWF      FARG_sendchar_c
0x00B1	0x204B      	CALL       _sendchar
;F2L.c,143 :: 		}
0x00B2	0x28BB      	GOTO       L_sendhex10
L_sendhex9:
;F2L.c,144 :: 		else if (cr == LINE_CR)
0x00B3	0x0020      	MOVLB      0
0x00B4	0x0842      	MOVF       FARG_sendhex_cr, 0
0x00B5	0x3A01      	XORLW      1
0x00B6	0x1D03      	BTFSS      STATUS, 2
0x00B7	0x28BB      	GOTO       L_sendhex11
;F2L.c,146 :: 		sendchar('\r');
0x00B8	0x300D      	MOVLW      13
0x00B9	0x00C5      	MOVWF      FARG_sendchar_c
0x00BA	0x204B      	CALL       _sendchar
;F2L.c,147 :: 		}
L_sendhex11:
L_sendhex10:
;F2L.c,150 :: 		}
L_end_sendhex:
0x00BB	0x0008      	RETURN
; end of _sendhex
_absvalue:
;F2L.c,96 :: 		unsigned int absvalue(unsigned int a, unsigned int b)
;F2L.c,98 :: 		if (a > b)
0x00BC	0x0020      	MOVLB      0
0x00BD	0x083F      	MOVF       FARG_absvalue_a+1, 0
0x00BE	0x0241      	SUBWF      FARG_absvalue_b+1, 0
0x00BF	0x1D03      	BTFSS      STATUS, 2
0x00C0	0x28C3      	GOTO       L__absvalue43
0x00C1	0x083E      	MOVF       FARG_absvalue_a, 0
0x00C2	0x0240      	SUBWF      FARG_absvalue_b, 0
L__absvalue43:
0x00C3	0x1803      	BTFSC      STATUS, 0
0x00C4	0x28CC      	GOTO       L_absvalue1
;F2L.c,100 :: 		return (a-b);
0x00C5	0x0840      	MOVF       FARG_absvalue_b, 0
0x00C6	0x023E      	SUBWF      FARG_absvalue_a, 0
0x00C7	0x00F0      	MOVWF      R0
0x00C8	0x0841      	MOVF       FARG_absvalue_b+1, 0
0x00C9	0x3B3F      	SUBWFB     FARG_absvalue_a+1, 0
0x00CA	0x00F1      	MOVWF      R1
0x00CB	0x28D2      	GOTO       L_end_absvalue
;F2L.c,101 :: 		}
L_absvalue1:
;F2L.c,104 :: 		return (b-a);
0x00CC	0x083E      	MOVF       FARG_absvalue_a, 0
0x00CD	0x0240      	SUBWF      FARG_absvalue_b, 0
0x00CE	0x00F0      	MOVWF      R0
0x00CF	0x083F      	MOVF       FARG_absvalue_a+1, 0
0x00D0	0x3B41      	SUBWFB     FARG_absvalue_b+1, 0
0x00D1	0x00F1      	MOVWF      R1
;F2L.c,107 :: 		}
L_end_absvalue:
0x00D2	0x0008      	RETURN
; end of _absvalue
_ADC_Read:
;__Lib_ADC.c,44 :: 		
;__Lib_ADC.c,46 :: 		
0x00D3	0x203C      	CALL       _ADC_Init
;__Lib_ADC.c,47 :: 		
0x00D4	0x0020      	MOVLB      0
0x00D5	0x083E      	MOVF       FARG_ADC_Read_channel, 0
0x00D6	0x00C5      	MOVWF      FARG_ADC_Get_Sample_channel
0x00D7	0x2024      	CALL       _ADC_Get_Sample
;__Lib_ADC.c,48 :: 		
0x00D8	0x101D      	BCF        ADON_bit, 0
;__Lib_ADC.c,49 :: 		
;__Lib_ADC.c,50 :: 		
L_end_ADC_Read:
0x00D9	0x0008      	RETURN
; end of _ADC_Read
_sendstring:
;F2L.c,154 :: 		void sendstring (char* string, unsigned char cr)
;F2L.c,157 :: 		int i = 0;
0x00DA	0x0020      	MOVLB      0
0x00DB	0x01C2      	CLRF       sendstring_i_L0
0x00DC	0x01C3      	CLRF       sendstring_i_L0+1
;F2L.c,159 :: 		while (c=string[i++])
L_sendstring12:
0x00DD	0x0020      	MOVLB      0
0x00DE	0x0842      	MOVF       sendstring_i_L0, 0
0x00DF	0x00F0      	MOVWF      R0
0x00E0	0x0843      	MOVF       sendstring_i_L0+1, 0
0x00E1	0x00F1      	MOVWF      R1
0x00E2	0x0AC2      	INCF       sendstring_i_L0, 1
0x00E3	0x1903      	BTFSC      STATUS, 2
0x00E4	0x0AC3      	INCF       sendstring_i_L0+1, 1
0x00E5	0x0870      	MOVF       R0, 0
0x00E6	0x073E      	ADDWF      FARG_sendstring_string, 0
0x00E7	0x0084      	MOVWF      FSR0
0x00E8	0x0871      	MOVF       R1, 0
0x00E9	0x3D3F      	ADDWFC     FARG_sendstring_string+1, 0
0x00EA	0x0085      	MOVWF      FSR0H
0x00EB	0x0800      	MOVF       INDF0, 0
0x00EC	0x00F0      	MOVWF      R0
0x00ED	0x0870      	MOVF       R0, 0
0x00EE	0x00C1      	MOVWF      sendstring_c_L0
0x00EF	0x0870      	MOVF       R0, 0
0x00F0	0x1903      	BTFSC      STATUS, 2
0x00F1	0x28F6      	GOTO       L_sendstring13
;F2L.c,161 :: 		sendchar(c);
0x00F2	0x0841      	MOVF       sendstring_c_L0, 0
0x00F3	0x00C5      	MOVWF      FARG_sendchar_c
0x00F4	0x204B      	CALL       _sendchar
;F2L.c,162 :: 		}
0x00F5	0x28DD      	GOTO       L_sendstring12
L_sendstring13:
;F2L.c,165 :: 		if (cr == LINE_CR_LF )
0x00F6	0x0020      	MOVLB      0
0x00F7	0x0840      	MOVF       FARG_sendstring_cr, 0
0x00F8	0x3A02      	XORLW      2
0x00F9	0x1D03      	BTFSS      STATUS, 2
0x00FA	0x2903      	GOTO       L_sendstring14
;F2L.c,167 :: 		sendchar('\r');
0x00FB	0x300D      	MOVLW      13
0x00FC	0x00C5      	MOVWF      FARG_sendchar_c
0x00FD	0x204B      	CALL       _sendchar
;F2L.c,168 :: 		sendchar('\n');
0x00FE	0x300A      	MOVLW      10
0x00FF	0x0020      	MOVLB      0
0x0100	0x00C5      	MOVWF      FARG_sendchar_c
0x0101	0x204B      	CALL       _sendchar
;F2L.c,169 :: 		}
0x0102	0x290B      	GOTO       L_sendstring15
L_sendstring14:
;F2L.c,170 :: 		else if (cr == LINE_CR)
0x0103	0x0020      	MOVLB      0
0x0104	0x0840      	MOVF       FARG_sendstring_cr, 0
0x0105	0x3A01      	XORLW      1
0x0106	0x1D03      	BTFSS      STATUS, 2
0x0107	0x290B      	GOTO       L_sendstring16
;F2L.c,172 :: 		sendchar('\r');
0x0108	0x300D      	MOVLW      13
0x0109	0x00C5      	MOVWF      FARG_sendchar_c
0x010A	0x204B      	CALL       _sendchar
;F2L.c,173 :: 		}
L_sendstring16:
L_sendstring15:
;F2L.c,175 :: 		}
L_end_sendstring:
0x010B	0x0008      	RETURN
; end of _sendstring
_UART1_Init:
;__Lib_UART_c45.c,12 :: 		
;__Lib_UART_c45.c,15 :: 		
0x010C	0x301A      	MOVLW      _UART1_Write
0x010D	0x0020      	MOVLB      0
0x010E	0x00B0      	MOVWF      _UART_Wr_Ptr
0x010F	0x3000      	MOVLW      hi_addr(_UART1_Write)
0x0110	0x00B1      	MOVWF      _UART_Wr_Ptr+1
0x0111	0x3046      	MOVLW      FARG_UART1_Write_data_
0x0112	0x00B2      	MOVWF      _UART_Wr_Ptr+2
0x0113	0x3000      	MOVLW      hi_addr(FARG_UART1_Write_data_)
0x0114	0x00B3      	MOVWF      _UART_Wr_Ptr+3
;__Lib_UART_c45.c,16 :: 		
0x0115	0x30FF      	MOVLW      _UART1_Read
0x0116	0x00B4      	MOVWF      _UART_Rd_Ptr
0x0117	0x30FF      	MOVLW      hi_addr(_UART1_Read)
0x0118	0x00B5      	MOVWF      _UART_Rd_Ptr+1
0x0119	0x3000      	MOVLW      0
0x011A	0x00B6      	MOVWF      _UART_Rd_Ptr+2
0x011B	0x3000      	MOVLW      0
0x011C	0x00B7      	MOVWF      _UART_Rd_Ptr+3
;__Lib_UART_c45.c,17 :: 		
0x011D	0x30FF      	MOVLW      _UART1_Data_Ready
0x011E	0x00A8      	MOVWF      _UART_Rdy_Ptr
0x011F	0x30FF      	MOVLW      hi_addr(_UART1_Data_Ready)
0x0120	0x00A9      	MOVWF      _UART_Rdy_Ptr+1
0x0121	0x3000      	MOVLW      0
0x0122	0x00AA      	MOVWF      _UART_Rdy_Ptr+2
0x0123	0x3000      	MOVLW      0
0x0124	0x00AB      	MOVWF      _UART_Rdy_Ptr+3
;__Lib_UART_c45.c,18 :: 		
0x0125	0x3014      	MOVLW      _UART1_Tx_Idle
0x0126	0x00AC      	MOVWF      _UART_Tx_Idle_Ptr
0x0127	0x3000      	MOVLW      hi_addr(_UART1_Tx_Idle)
0x0128	0x00AD      	MOVWF      _UART_Tx_Idle_Ptr+1
0x0129	0x3000      	MOVLW      0
0x012A	0x00AE      	MOVWF      _UART_Tx_Idle_Ptr+2
0x012B	0x3000      	MOVLW      0
0x012C	0x00AF      	MOVWF      _UART_Tx_Idle_Ptr+3
;__Lib_UART_c45.c,20 :: 		
0x012D	0x0023      	MOVLB      3
0x012E	0x169E      	BSF        TXSTA, 5
;__Lib_UART_c45.c,21 :: 		
0x012F	0x3090      	MOVLW      144
0x0130	0x009D      	MOVWF      RCSTA
;__Lib_UART_c45.c,22 :: 		
0x0131	0x0021      	MOVLB      1
0x0132	0x168E      	BSF        TRISC5_bit, 5
;__Lib_UART_c45.c,23 :: 		
0x0133	0x160E      	BSF        TRISC4_bit, 4
;__Lib_UART_c45.c,24 :: 		
L_UART1_Init0:
0x0134	0x0020      	MOVLB      0
0x0135	0x1E91      	BTFSS      PIR1, 5
0x0136	0x293B      	GOTO       L_UART1_Init1
;__Lib_UART_c45.c,25 :: 		
0x0137	0x0023      	MOVLB      3
0x0138	0x0819      	MOVF       RCREG, 0
0x0139	0x00F0      	MOVWF      R0
0x013A	0x2934      	GOTO       L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c45.c,26 :: 		
L_end_UART1_Init:
0x013B	0x0008      	RETURN
; end of _UART1_Init
_main:
;F2L.c,182 :: 		void main()
;F2L.c,186 :: 		OSCCON= 0xF0;
0x013C	0x30F0      	MOVLW      240
0x013D	0x0021      	MOVLB      1
0x013E	0x0099      	MOVWF      OSCCON
;F2L.c,190 :: 		TRISA.TRISA0 = IN;  // PIN 13 = AN0  = potmeter1
0x013F	0x140C      	BSF        TRISA, 0
;F2L.c,191 :: 		PORTA.RA0 = 1;
0x0140	0x0020      	MOVLB      0
0x0141	0x140C      	BSF        PORTA, 0
;F2L.c,192 :: 		TRISA.TRISA1 = IN;  // PIN 12 = AN1  = potmeter2
0x0142	0x0021      	MOVLB      1
0x0143	0x148C      	BSF        TRISA, 1
;F2L.c,193 :: 		PORTA.RA1 = 1;
0x0144	0x0020      	MOVLB      0
0x0145	0x148C      	BSF        PORTA, 1
;F2L.c,194 :: 		TRISA.TRISA2 = OUT /*IN*/;  // PIN 11 = AN2  = potmeter3 = COMP1 OUT    xxxxxxxxxxx
0x0146	0x0021      	MOVLB      1
0x0147	0x110C      	BCF        TRISA, 2
;F2L.c,195 :: 		PORTA.RA2 = 1;
0x0148	0x0020      	MOVLB      0
0x0149	0x150C      	BSF        PORTA, 2
;F2L.c,196 :: 		TRISA.TRISA3 = IN;  // PIN 4 = MODE switch
0x014A	0x0021      	MOVLB      1
0x014B	0x158C      	BSF        TRISA, 3
;F2L.c,197 :: 		PORTA.RA2 = 1;
0x014C	0x0020      	MOVLB      0
0x014D	0x150C      	BSF        PORTA, 2
;F2L.c,198 :: 		TRISA.TRISA4 = OUT; // PIN 3 = LED2
0x014E	0x0021      	MOVLB      1
0x014F	0x120C      	BCF        TRISA, 4
;F2L.c,199 :: 		PORTA.RA4 = 1;
0x0150	0x0020      	MOVLB      0
0x0151	0x160C      	BSF        PORTA, 4
;F2L.c,200 :: 		TRISA.TRISA5 = OUT; // PIN 2 = LED1
0x0152	0x0021      	MOVLB      1
0x0153	0x128C      	BCF        TRISA, 5
;F2L.c,201 :: 		PORTA.RA5 = 1;
0x0154	0x0020      	MOVLB      0
0x0155	0x168C      	BSF        PORTA, 5
;F2L.c,204 :: 		TRISC.TRISC0 = IN;  // PIN 10 = AN4 = potmeter4
0x0156	0x0021      	MOVLB      1
0x0157	0x140E      	BSF        TRISC, 0
;F2L.c,205 :: 		PORTC.RC0 = 1;
0x0158	0x0020      	MOVLB      0
0x0159	0x140E      	BSF        PORTC, 0
;F2L.c,206 :: 		TRISC.TRISC1 = IN;  // PIN 9 = audio in = C12IN1-
0x015A	0x0021      	MOVLB      1
0x015B	0x148E      	BSF        TRISC, 1
;F2L.c,207 :: 		PORTC.RC1 = 1;
0x015C	0x0020      	MOVLB      0
0x015D	0x148E      	BSF        PORTC, 1
;F2L.c,208 :: 		TRISC.TRISC2 = IN;  // PIN 8 = NA = C12IN2-
0x015E	0x0021      	MOVLB      1
0x015F	0x150E      	BSF        TRISC, 2
;F2L.c,209 :: 		PORTC.RC2 = 1;
0x0160	0x0020      	MOVLB      0
0x0161	0x150E      	BSF        PORTC, 2
;F2L.c,210 :: 		TRISC.TRISC3 = OUT; // PIN 7 = NA
0x0162	0x0021      	MOVLB      1
0x0163	0x118E      	BCF        TRISC, 3
;F2L.c,211 :: 		PORTC.RC3 = 1;
0x0164	0x0020      	MOVLB      0
0x0165	0x158E      	BSF        PORTC, 3
;F2L.c,212 :: 		TRISC.TRISC4 = OUT; // PIN 6 = LED4
0x0166	0x0021      	MOVLB      1
0x0167	0x120E      	BCF        TRISC, 4
;F2L.c,213 :: 		PORTC.RC4 = 1;
0x0168	0x0020      	MOVLB      0
0x0169	0x160E      	BSF        PORTC, 4
;F2L.c,214 :: 		TRISC.TRISC5 = OUT; // PIN 5 = LED3
0x016A	0x0021      	MOVLB      1
0x016B	0x128E      	BCF        TRISC, 5
;F2L.c,215 :: 		PORTC.RC5 = 1;
0x016C	0x0020      	MOVLB      0
0x016D	0x168E      	BSF        PORTC, 5
;F2L.c,218 :: 		ANSELA.ANSA0 = 1;     // potmeter1
0x016E	0x0023      	MOVLB      3
0x016F	0x140C      	BSF        ANSELA, 0
;F2L.c,219 :: 		ANSELA.ANSA1 = 1;     // potmeter2
0x0170	0x148C      	BSF        ANSELA, 1
;F2L.c,221 :: 		ANSELC.ANSC0 = 1;     // potmeter4
0x0171	0x140E      	BSF        ANSELC, 0
;F2L.c,222 :: 		ANSELC.ANSC1 = 1;     //  RC1 = C12IN1-
0x0172	0x148E      	BSF        ANSELC, 1
;F2L.c,225 :: 		CM1CON0.C1POL = 0;             // comp output polarity is not inverted
0x0173	0x0022      	MOVLB      2
0x0174	0x1211      	BCF        CM1CON0, 4
;F2L.c,226 :: 		CM1CON0.C1OE = 0;              // comp output disabled   xxxxxxxxxx
0x0175	0x1291      	BCF        CM1CON0, 5
;F2L.c,227 :: 		CM1CON0.C1SP = 1;              // high speed
0x0176	0x1511      	BSF        CM1CON0, 2
;F2L.c,228 :: 		CM1CON0.C1ON = 1;              // comp is enabled
0x0177	0x1791      	BSF        CM1CON0, 7
;F2L.c,229 :: 		CM1CON0.C1HYS = 1;             // hysteresis enabled
0x0178	0x1491      	BSF        CM1CON0, 1
;F2L.c,230 :: 		CM1CON0.C1SYNC = 0;            // comp output synchronous with timer 1
0x0179	0x1011      	BCF        CM1CON0, 0
;F2L.c,231 :: 		CM1CON1.C1NCH0 = 1;            // C1IN1-
0x017A	0x1412      	BSF        CM1CON1, 0
;F2L.c,232 :: 		CM1CON1.C1NCH1 = 0;            // C1IN1-
0x017B	0x1092      	BCF        CM1CON1, 1
;F2L.c,233 :: 		CM1CON1.C1PCH0 = 1;            // DAC reference
0x017C	0x1612      	BSF        CM1CON1, 4
;F2L.c,234 :: 		CM1CON1.C1PCH1 = 0;            // DAC reference
0x017D	0x1292      	BCF        CM1CON1, 5
;F2L.c,237 :: 		DACCON0.DACEN = 1;             // DAC enable
0x017E	0x1798      	BSF        DACCON0, 7
;F2L.c,238 :: 		DACCON0.DACLPS = 0;            // Negative reference
0x017F	0x1318      	BCF        DACCON0, 6
;F2L.c,239 :: 		DACCON0.DACOE = 0;             // DAC output enable
0x0180	0x1298      	BCF        DACCON0, 5
;F2L.c,240 :: 		DACCON0.DACPSS0 = 0;           // VDD
0x0181	0x1118      	BCF        DACCON0, 2
;F2L.c,241 :: 		DACCON0.DACPSS1 = 0;           // VDD
0x0182	0x1198      	BCF        DACCON0, 3
;F2L.c,242 :: 		DACCON0.DACNSS = 0;            // GND
0x0183	0x1018      	BCF        DACCON0, 0
;F2L.c,243 :: 		DACCON1 = 16;                  // 5V / 32 * 16 = 2.5V
0x0184	0x3010      	MOVLW      16
0x0185	0x0099      	MOVWF      DACCON1
;F2L.c,246 :: 		ADCON0.ADON = 1;            //  ADC on
0x0186	0x0021      	MOVLB      1
0x0187	0x141D      	BSF        ADCON0, 0
;F2L.c,247 :: 		ADCON1.ADFM = 1;            // right justified
0x0188	0x179E      	BSF        ADCON1, 7
;F2L.c,248 :: 		ADCON1.ADCS0 = 0;           // Fosc / 64
0x0189	0x121E      	BCF        ADCON1, 4
;F2L.c,249 :: 		ADCON1.ADCS1 = 1;           // Fosc / 64
0x018A	0x169E      	BSF        ADCON1, 5
;F2L.c,250 :: 		ADCON1.ADCS2 = 1;           // Fosc / 64
0x018B	0x171E      	BSF        ADCON1, 6
;F2L.c,251 :: 		ADCON1.ADNREF = 0;          // Vref- = VSS
0x018C	0x111E      	BCF        ADCON1, 2
;F2L.c,252 :: 		ADCON1.ADPREF0 = 0;         // Vref+ = VDD
0x018D	0x101E      	BCF        ADCON1, 0
;F2L.c,253 :: 		ADCON1.ADPREF1 = 0;         // Vref+ = VDD
0x018E	0x109E      	BCF        ADCON1, 1
;F2L.c,258 :: 		CM1CON1.C1INTP = 1; // rising edge
0x018F	0x0022      	MOVLB      2
0x0190	0x1792      	BSF        CM1CON1, 7
;F2L.c,259 :: 		CM1CON1.C1INTN = 0; // falling edge
0x0191	0x1312      	BCF        CM1CON1, 6
;F2L.c,260 :: 		PIE2.C1IE = 0; // comparator interrupt
0x0192	0x0021      	MOVLB      1
0x0193	0x1292      	BCF        PIE2, 5
;F2L.c,262 :: 		INTCON.PEIE = 1;
0x0194	0x170B      	BSF        INTCON, 6
;F2L.c,263 :: 		INTCON.GIE = 1;
0x0195	0x178B      	BSF        INTCON, 7
;F2L.c,267 :: 		APFCON0.RXDTSEL = 0;         // RX = pin 5 RC5
0x0196	0x0022      	MOVLB      2
0x0197	0x139D      	BCF        APFCON0, 7
;F2L.c,269 :: 		APFCON0.TXCKSEL = 0;        // pin 6 = RC4
0x0198	0x111D      	BCF        APFCON0, 2
;F2L.c,272 :: 		UART1_Init(9600);
0x0199	0x0023      	MOVLB      3
0x019A	0x159F      	BSF        BAUDCON, 3
0x019B	0x3040      	MOVLW      64
0x019C	0x009B      	MOVWF      SPBRG
0x019D	0x3003      	MOVLW      3
0x019E	0x009C      	MOVWF      SPBRG+1
0x019F	0x151E      	BSF        TXSTA, 2
0x01A0	0x210C      	CALL       _UART1_Init
;F2L.c,278 :: 		LED1 = ON;
0x01A1	0x0022      	MOVLB      2
0x01A2	0x168C      	BSF        LATA, 5
;F2L.c,279 :: 		LED2 = ON;
0x01A3	0x160C      	BSF        LATA, 4
;F2L.c,280 :: 		LED3 = ON;
0x01A4	0x168E      	BSF        LATC, 5
;F2L.c,281 :: 		LED4 = ON;
0x01A5	0x160E      	BSF        LATC, 4
;F2L.c,282 :: 		Delay_ms(500);
0x01A6	0x3015      	MOVLW      21
0x01A7	0x00FB      	MOVWF      R11
0x01A8	0x304B      	MOVLW      75
0x01A9	0x00FC      	MOVWF      R12
0x01AA	0x30BE      	MOVLW      190
0x01AB	0x00FD      	MOVWF      R13
L_main17:
0x01AC	0x0BFD      	DECFSZ     R13, 1
0x01AD	0x29AC      	GOTO       L_main17
0x01AE	0x0BFC      	DECFSZ     R12, 1
0x01AF	0x29AC      	GOTO       L_main17
0x01B0	0x0BFB      	DECFSZ     R11, 1
0x01B1	0x29AC      	GOTO       L_main17
0x01B2	0x0000      	NOP
;F2L.c,283 :: 		LED1 = OFF;
0x01B3	0x128C      	BCF        LATA, 5
;F2L.c,284 :: 		LED2 = OFF;
0x01B4	0x120C      	BCF        LATA, 4
;F2L.c,285 :: 		LED3 = OFF;
0x01B5	0x128E      	BCF        LATC, 5
;F2L.c,286 :: 		LED4 = OFF;
0x01B6	0x120E      	BCF        LATC, 4
;F2L.c,291 :: 		sendstring(STR_WELCOME, LINE_CR_LF);
0x01B7	0x30A8      	MOVLW      _STR_WELCOME
0x01B8	0x0020      	MOVLB      0
0x01B9	0x00BE      	MOVWF      FARG_sendstring_string
0x01BA	0x3082      	MOVLW      hi_addr(_STR_WELCOME)
0x01BB	0x00BF      	MOVWF      FARG_sendstring_string+1
0x01BC	0x3002      	MOVLW      2
0x01BD	0x00C0      	MOVWF      FARG_sendstring_cr
0x01BE	0x20DA      	CALL       _sendstring
;F2L.c,298 :: 		while(1)
L_main18:
;F2L.c,301 :: 		pulse_count = 0;
0x01BF	0x0020      	MOVLB      0
0x01C0	0x01A2      	CLRF       F2L_pulse_count
0x01C1	0x01A3      	CLRF       F2L_pulse_count+1
;F2L.c,304 :: 		PIE2.C1IE = 1;
0x01C2	0x0021      	MOVLB      1
0x01C3	0x1692      	BSF        PIE2, 5
;F2L.c,305 :: 		Delay_ms(SAMPLE_TIME_MS);
0x01C4	0x3006      	MOVLW      6
0x01C5	0x00FB      	MOVWF      R11
0x01C6	0x3032      	MOVLW      50
0x01C7	0x00FC      	MOVWF      R12
0x01C8	0x30D9      	MOVLW      217
0x01C9	0x00FD      	MOVWF      R13
L_main20:
0x01CA	0x0BFD      	DECFSZ     R13, 1
0x01CB	0x29CA      	GOTO       L_main20
0x01CC	0x0BFC      	DECFSZ     R12, 1
0x01CD	0x29CA      	GOTO       L_main20
0x01CE	0x0BFB      	DECFSZ     R11, 1
0x01CF	0x29CA      	GOTO       L_main20
;F2L.c,306 :: 		PIE2.C1IE = 0;
0x01D0	0x1292      	BCF        PIE2, 5
;F2L.c,309 :: 		if (pulse_count > 1024)
0x01D1	0x0020      	MOVLB      0
0x01D2	0x0823      	MOVF       F2L_pulse_count+1, 0
0x01D3	0x3C04      	SUBLW      4
0x01D4	0x1D03      	BTFSS      STATUS, 2
0x01D5	0x29D8      	GOTO       L__main53
0x01D6	0x0822      	MOVF       F2L_pulse_count, 0
0x01D7	0x3C00      	SUBLW      0
L__main53:
0x01D8	0x1803      	BTFSC      STATUS, 0
0x01D9	0x29DE      	GOTO       L_main21
;F2L.c,311 :: 		pulse_count = 1024;
0x01DA	0x3000      	MOVLW      0
0x01DB	0x00A2      	MOVWF      F2L_pulse_count
0x01DC	0x3004      	MOVLW      4
0x01DD	0x00A3      	MOVWF      F2L_pulse_count+1
;F2L.c,312 :: 		}
L_main21:
;F2L.c,315 :: 		potmeter1 = ADC_Read(0);
0x01DE	0x01BE      	CLRF       FARG_ADC_Read_channel
0x01DF	0x20D3      	CALL       _ADC_Read
0x01E0	0x0870      	MOVF       R0, 0
0x01E1	0x0020      	MOVLB      0
0x01E2	0x00A0      	MOVWF      F2L_potmeter1
0x01E3	0x0871      	MOVF       R1, 0
0x01E4	0x00A1      	MOVWF      F2L_potmeter1+1
;F2L.c,316 :: 		potmeter2 = ADC_Read(1);
0x01E5	0x3001      	MOVLW      1
0x01E6	0x00BE      	MOVWF      FARG_ADC_Read_channel
0x01E7	0x20D3      	CALL       _ADC_Read
0x01E8	0x0870      	MOVF       R0, 0
0x01E9	0x0020      	MOVLB      0
0x01EA	0x00A6      	MOVWF      F2L_potmeter2
0x01EB	0x0871      	MOVF       R1, 0
0x01EC	0x00A7      	MOVWF      F2L_potmeter2+1
;F2L.c,318 :: 		potmeter4 = ADC_Read(4);
0x01ED	0x3004      	MOVLW      4
0x01EE	0x00BE      	MOVWF      FARG_ADC_Read_channel
0x01EF	0x20D3      	CALL       _ADC_Read
0x01F0	0x0870      	MOVF       R0, 0
0x01F1	0x0020      	MOVLB      0
0x01F2	0x00A4      	MOVWF      F2L_potmeter4
0x01F3	0x0871      	MOVF       R1, 0
0x01F4	0x00A5      	MOVWF      F2L_potmeter4+1
;F2L.c,320 :: 		sendhex (potmeter1, LINE_NONE);
0x01F5	0x0820      	MOVF       F2L_potmeter1, 0
0x01F6	0x00BE      	MOVWF      FARG_sendhex_hexnumber
0x01F7	0x0821      	MOVF       F2L_potmeter1+1, 0
0x01F8	0x00BF      	MOVWF      FARG_sendhex_hexnumber+1
0x01F9	0x01C0      	CLRF       FARG_sendhex_hexnumber+2
0x01FA	0x01C1      	CLRF       FARG_sendhex_hexnumber+3
0x01FB	0x01C2      	CLRF       FARG_sendhex_cr
0x01FC	0x205E      	CALL       _sendhex
;F2L.c,321 :: 		sendchar(',');
0x01FD	0x302C      	MOVLW      44
0x01FE	0x0020      	MOVLB      0
0x01FF	0x00C5      	MOVWF      FARG_sendchar_c
0x0200	0x204B      	CALL       _sendchar
;F2L.c,322 :: 		sendchar(' ');
0x0201	0x3020      	MOVLW      32
0x0202	0x0020      	MOVLB      0
0x0203	0x00C5      	MOVWF      FARG_sendchar_c
0x0204	0x204B      	CALL       _sendchar
;F2L.c,323 :: 		sendhex (pulse_count, LINE_CR_LF);
0x0205	0x0020      	MOVLB      0
0x0206	0x0822      	MOVF       F2L_pulse_count, 0
0x0207	0x00BE      	MOVWF      FARG_sendhex_hexnumber
0x0208	0x0823      	MOVF       F2L_pulse_count+1, 0
0x0209	0x00BF      	MOVWF      FARG_sendhex_hexnumber+1
0x020A	0x01C0      	CLRF       FARG_sendhex_hexnumber+2
0x020B	0x01C1      	CLRF       FARG_sendhex_hexnumber+3
0x020C	0x3002      	MOVLW      2
0x020D	0x00C2      	MOVWF      FARG_sendhex_cr
0x020E	0x205E      	CALL       _sendhex
;F2L.c,325 :: 		if (MODE_EQUAL)
0x020F	0x0020      	MOVLB      0
0x0210	0x1D8C      	BTFSS      PORTA, 3
0x0211	0x2A6E      	GOTO       L_main22
;F2L.c,327 :: 		if ( absvalue(pulse_count, potmeter1) < SAMPLE_TOLERANCE)
0x0212	0x0822      	MOVF       F2L_pulse_count, 0
0x0213	0x00BE      	MOVWF      FARG_absvalue_a
0x0214	0x0823      	MOVF       F2L_pulse_count+1, 0
0x0215	0x00BF      	MOVWF      FARG_absvalue_a+1
0x0216	0x0820      	MOVF       F2L_potmeter1, 0
0x0217	0x00C0      	MOVWF      FARG_absvalue_b
0x0218	0x0821      	MOVF       F2L_potmeter1+1, 0
0x0219	0x00C1      	MOVWF      FARG_absvalue_b+1
0x021A	0x20BC      	CALL       _absvalue
0x021B	0x3000      	MOVLW      0
0x021C	0x0271      	SUBWF      R1, 0
0x021D	0x1D03      	BTFSS      STATUS, 2
0x021E	0x2A21      	GOTO       L__main54
0x021F	0x3014      	MOVLW      20
0x0220	0x0270      	SUBWF      R0, 0
L__main54:
0x0221	0x1803      	BTFSC      STATUS, 0
0x0222	0x2A26      	GOTO       L_main23
;F2L.c,329 :: 		LED1 = ON;
0x0223	0x0022      	MOVLB      2
0x0224	0x168C      	BSF        LATA, 5
;F2L.c,330 :: 		}
0x0225	0x2A28      	GOTO       L_main24
L_main23:
0x0226	0x0022      	MOVLB      2
;F2L.c,333 :: 		LED1 = OFF;
0x0227	0x128C      	BCF        LATA, 5
;F2L.c,334 :: 		}
L_main24:
;F2L.c,335 :: 		if ( absvalue(pulse_count, potmeter2) < SAMPLE_TOLERANCE)
0x0228	0x0020      	MOVLB      0
0x0229	0x0822      	MOVF       F2L_pulse_count, 0
0x022A	0x00BE      	MOVWF      FARG_absvalue_a
0x022B	0x0823      	MOVF       F2L_pulse_count+1, 0
0x022C	0x00BF      	MOVWF      FARG_absvalue_a+1
0x022D	0x0826      	MOVF       F2L_potmeter2, 0
0x022E	0x00C0      	MOVWF      FARG_absvalue_b
0x022F	0x0827      	MOVF       F2L_potmeter2+1, 0
0x0230	0x00C1      	MOVWF      FARG_absvalue_b+1
0x0231	0x20BC      	CALL       _absvalue
0x0232	0x3000      	MOVLW      0
0x0233	0x0271      	SUBWF      R1, 0
0x0234	0x1D03      	BTFSS      STATUS, 2
0x0235	0x2A38      	GOTO       L__main55
0x0236	0x3014      	MOVLW      20
0x0237	0x0270      	SUBWF      R0, 0
L__main55:
0x0238	0x1803      	BTFSC      STATUS, 0
0x0239	0x2A3D      	GOTO       L_main25
;F2L.c,337 :: 		LED2 = ON;
0x023A	0x0022      	MOVLB      2
0x023B	0x160C      	BSF        LATA, 4
;F2L.c,338 :: 		}
0x023C	0x2A3F      	GOTO       L_main26
L_main25:
0x023D	0x0022      	MOVLB      2
;F2L.c,341 :: 		LED2 = OFF;
0x023E	0x120C      	BCF        LATA, 4
;F2L.c,342 :: 		}
L_main26:
;F2L.c,343 :: 		if ( absvalue(pulse_count, potmeter3) < SAMPLE_TOLERANCE)
0x023F	0x0020      	MOVLB      0
0x0240	0x0822      	MOVF       F2L_pulse_count, 0
0x0241	0x00BE      	MOVWF      FARG_absvalue_a
0x0242	0x0823      	MOVF       F2L_pulse_count+1, 0
0x0243	0x00BF      	MOVWF      FARG_absvalue_a+1
0x0244	0x0838      	MOVF       F2L_potmeter3, 0
0x0245	0x00C0      	MOVWF      FARG_absvalue_b
0x0246	0x0839      	MOVF       F2L_potmeter3+1, 0
0x0247	0x00C1      	MOVWF      FARG_absvalue_b+1
0x0248	0x20BC      	CALL       _absvalue
0x0249	0x3000      	MOVLW      0
0x024A	0x0271      	SUBWF      R1, 0
0x024B	0x1D03      	BTFSS      STATUS, 2
0x024C	0x2A4F      	GOTO       L__main56
0x024D	0x3014      	MOVLW      20
0x024E	0x0270      	SUBWF      R0, 0
L__main56:
0x024F	0x1803      	BTFSC      STATUS, 0
0x0250	0x2A54      	GOTO       L_main27
;F2L.c,345 :: 		LED3 = ON;
0x0251	0x0022      	MOVLB      2
0x0252	0x168E      	BSF        LATC, 5
;F2L.c,346 :: 		}
0x0253	0x2A56      	GOTO       L_main28
L_main27:
0x0254	0x0022      	MOVLB      2
;F2L.c,349 :: 		LED3 = OFF;
0x0255	0x128E      	BCF        LATC, 5
;F2L.c,350 :: 		}
L_main28:
;F2L.c,351 :: 		if ( absvalue(pulse_count, potmeter4) < SAMPLE_TOLERANCE)
0x0256	0x0020      	MOVLB      0
0x0257	0x0822      	MOVF       F2L_pulse_count, 0
0x0258	0x00BE      	MOVWF      FARG_absvalue_a
0x0259	0x0823      	MOVF       F2L_pulse_count+1, 0
0x025A	0x00BF      	MOVWF      FARG_absvalue_a+1
0x025B	0x0824      	MOVF       F2L_potmeter4, 0
0x025C	0x00C0      	MOVWF      FARG_absvalue_b
0x025D	0x0825      	MOVF       F2L_potmeter4+1, 0
0x025E	0x00C1      	MOVWF      FARG_absvalue_b+1
0x025F	0x20BC      	CALL       _absvalue
0x0260	0x3000      	MOVLW      0
0x0261	0x0271      	SUBWF      R1, 0
0x0262	0x1D03      	BTFSS      STATUS, 2
0x0263	0x2A66      	GOTO       L__main57
0x0264	0x3014      	MOVLW      20
0x0265	0x0270      	SUBWF      R0, 0
L__main57:
0x0266	0x1803      	BTFSC      STATUS, 0
0x0267	0x2A6B      	GOTO       L_main29
;F2L.c,353 :: 		LED4 = ON;
0x0268	0x0022      	MOVLB      2
0x0269	0x160E      	BSF        LATC, 4
;F2L.c,354 :: 		}
0x026A	0x2A6D      	GOTO       L_main30
L_main29:
0x026B	0x0022      	MOVLB      2
;F2L.c,357 :: 		LED4 = OFF;
0x026C	0x120E      	BCF        LATC, 4
;F2L.c,358 :: 		}
L_main30:
;F2L.c,359 :: 		}
0x026D	0x2AA6      	GOTO       L_main31
L_main22:
;F2L.c,362 :: 		if ( pulse_count > potmeter1 )
0x026E	0x0020      	MOVLB      0
0x026F	0x0823      	MOVF       F2L_pulse_count+1, 0
0x0270	0x0221      	SUBWF      F2L_potmeter1+1, 0
0x0271	0x1D03      	BTFSS      STATUS, 2
0x0272	0x2A75      	GOTO       L__main58
0x0273	0x0822      	MOVF       F2L_pulse_count, 0
0x0274	0x0220      	SUBWF      F2L_potmeter1, 0
L__main58:
0x0275	0x1803      	BTFSC      STATUS, 0
0x0276	0x2A7A      	GOTO       L_main32
;F2L.c,364 :: 		LED1 = ON;
0x0277	0x0022      	MOVLB      2
0x0278	0x168C      	BSF        LATA, 5
;F2L.c,365 :: 		}
0x0279	0x2A7C      	GOTO       L_main33
L_main32:
0x027A	0x0022      	MOVLB      2
;F2L.c,368 :: 		LED1 = OFF;
0x027B	0x128C      	BCF        LATA, 5
;F2L.c,369 :: 		}
L_main33:
;F2L.c,370 :: 		if ( pulse_count > potmeter2 )
0x027C	0x0020      	MOVLB      0
0x027D	0x0823      	MOVF       F2L_pulse_count+1, 0
0x027E	0x0227      	SUBWF      F2L_potmeter2+1, 0
0x027F	0x1D03      	BTFSS      STATUS, 2
0x0280	0x2A83      	GOTO       L__main59
0x0281	0x0822      	MOVF       F2L_pulse_count, 0
0x0282	0x0226      	SUBWF      F2L_potmeter2, 0
L__main59:
0x0283	0x1803      	BTFSC      STATUS, 0
0x0284	0x2A88      	GOTO       L_main34
;F2L.c,372 :: 		LED2 = ON;
0x0285	0x0022      	MOVLB      2
0x0286	0x160C      	BSF        LATA, 4
;F2L.c,373 :: 		}
0x0287	0x2A8A      	GOTO       L_main35
L_main34:
0x0288	0x0022      	MOVLB      2
;F2L.c,376 :: 		LED2 = OFF;
0x0289	0x120C      	BCF        LATA, 4
;F2L.c,377 :: 		}
L_main35:
;F2L.c,378 :: 		if ( pulse_count > potmeter3 )
0x028A	0x0020      	MOVLB      0
0x028B	0x0823      	MOVF       F2L_pulse_count+1, 0
0x028C	0x0239      	SUBWF      F2L_potmeter3+1, 0
0x028D	0x1D03      	BTFSS      STATUS, 2
0x028E	0x2A91      	GOTO       L__main60
0x028F	0x0822      	MOVF       F2L_pulse_count, 0
0x0290	0x0238      	SUBWF      F2L_potmeter3, 0
L__main60:
0x0291	0x1803      	BTFSC      STATUS, 0
0x0292	0x2A96      	GOTO       L_main36
;F2L.c,380 :: 		LED3 = ON;
0x0293	0x0022      	MOVLB      2
0x0294	0x168E      	BSF        LATC, 5
;F2L.c,381 :: 		}
0x0295	0x2A98      	GOTO       L_main37
L_main36:
0x0296	0x0022      	MOVLB      2
;F2L.c,384 :: 		LED3 = OFF;
0x0297	0x128E      	BCF        LATC, 5
;F2L.c,385 :: 		}
L_main37:
;F2L.c,386 :: 		if ( pulse_count > potmeter4 )
0x0298	0x0020      	MOVLB      0
0x0299	0x0823      	MOVF       F2L_pulse_count+1, 0
0x029A	0x0225      	SUBWF      F2L_potmeter4+1, 0
0x029B	0x1D03      	BTFSS      STATUS, 2
0x029C	0x2A9F      	GOTO       L__main61
0x029D	0x0822      	MOVF       F2L_pulse_count, 0
0x029E	0x0224      	SUBWF      F2L_potmeter4, 0
L__main61:
0x029F	0x1803      	BTFSC      STATUS, 0
0x02A0	0x2AA4      	GOTO       L_main38
;F2L.c,388 :: 		LED4 = ON;
0x02A1	0x0022      	MOVLB      2
0x02A2	0x160E      	BSF        LATC, 4
;F2L.c,389 :: 		}
0x02A3	0x2AA6      	GOTO       L_main39
L_main38:
0x02A4	0x0022      	MOVLB      2
;F2L.c,392 :: 		LED4 = OFF;
0x02A5	0x120E      	BCF        LATC, 4
;F2L.c,393 :: 		}
L_main39:
;F2L.c,395 :: 		}
L_main31:
;F2L.c,397 :: 		}  // while(1)
0x02A6	0x29BF      	GOTO       L_main18
;F2L.c,399 :: 		} //~!
L_end_main:
0x02A7	0x2AA7      	GOTO       $+0
; end of _main
;F2L.c,76 :: _STR_WELCOME
0x02A8	0x3453 ;_STR_WELCOME+0
0x02A9	0x3474 ;_STR_WELCOME+1
0x02AA	0x3461 ;_STR_WELCOME+2
0x02AB	0x3472 ;_STR_WELCOME+3
0x02AC	0x3474 ;_STR_WELCOME+4
0x02AD	0x3420 ;_STR_WELCOME+5
0x02AE	0x346D ;_STR_WELCOME+6
0x02AF	0x3465 ;_STR_WELCOME+7
0x02B0	0x3461 ;_STR_WELCOME+8
0x02B1	0x3473 ;_STR_WELCOME+9
0x02B2	0x3475 ;_STR_WELCOME+10
0x02B3	0x3472 ;_STR_WELCOME+11
0x02B4	0x3469 ;_STR_WELCOME+12
0x02B5	0x346E ;_STR_WELCOME+13
0x02B6	0x3467 ;_STR_WELCOME+14
0x02B7	0x3400 ;_STR_WELCOME+15
; end of _STR_WELCOME
;F2L.c,132 :: sendhex_hexnr_L0
0x02B8	0x3430 ;sendhex_hexnr_L0+0
0x02B9	0x3431 ;sendhex_hexnr_L0+1
0x02BA	0x3432 ;sendhex_hexnr_L0+2
0x02BB	0x3433 ;sendhex_hexnr_L0+3
0x02BC	0x3434 ;sendhex_hexnr_L0+4
0x02BD	0x3435 ;sendhex_hexnr_L0+5
0x02BE	0x3436 ;sendhex_hexnr_L0+6
0x02BF	0x3437 ;sendhex_hexnr_L0+7
0x02C0	0x3438 ;sendhex_hexnr_L0+8
0x02C1	0x3439 ;sendhex_hexnr_L0+9
0x02C2	0x3441 ;sendhex_hexnr_L0+10
0x02C3	0x3442 ;sendhex_hexnr_L0+11
0x02C4	0x3443 ;sendhex_hexnr_L0+12
0x02C5	0x3444 ;sendhex_hexnr_L0+13
0x02C6	0x3445 ;sendhex_hexnr_L0+14
0x02C7	0x3446 ;sendhex_hexnr_L0+15
; end of sendhex_hexnr_L0
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [10]    _interrupt
0x000E       [6]    _Delay_22us
0x0014       [6]    _UART1_Tx_Idle
0x001A      [10]    _UART1_Write
0x0024      [24]    _ADC_Get_Sample
0x003C      [15]    _ADC_Init
0x004B      [19]    _sendchar
0x005E      [94]    _sendhex
0x00BC      [23]    _absvalue
0x00D3       [7]    _ADC_Read
0x00DA      [50]    _sendstring
0x010C      [48]    _UART1_Init
0x013C     [364]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF0
0x0001       [1]    INDF1
0x0003       [1]    STATUS
0x0004       [1]    FSR0L
0x0005       [1]    FSR0H
0x0006       [1]    FSR1L
0x0007       [1]    FSR1H
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000C       [1]    PORTA
0x000E       [1]    PORTC
0x0011       [1]    PIR1
0x0012       [1]    PIR2
0x0020       [2]    F2L_potmeter1
0x0022       [2]    F2L_pulse_count
0x0024       [2]    F2L_potmeter4
0x0026       [2]    F2L_potmeter2
0x0028       [4]    _UART_Rdy_Ptr
0x002C       [4]    _UART_Tx_Idle_Ptr
0x0030       [4]    _UART_Wr_Ptr
0x0034       [4]    _UART_Rd_Ptr
0x0038       [2]    F2L_potmeter3
0x003A       [4]    _ADC_Get_Sample_Ptr
0x003E       [4]    FARG_sendhex_hexnumber
0x003E       [2]    FARG_absvalue_a
0x003E       [1]    FARG_ADC_Read_channel
0x003E       [2]    FARG_sendstring_string
0x0040       [2]    FARG_absvalue_b
0x0040       [1]    FARG_sendstring_cr
0x0041       [1]    sendstring_c_L0
0x0042       [1]    FARG_sendhex_cr
0x0042       [2]    sendstring_i_L0
0x0043       [2]    sendhex_nibble_L0
0x0045       [1]    FARG_sendchar_c
0x0045       [1]    FARG_ADC_Get_Sample_channel
0x0046       [1]    FARG_UART1_Write_data_
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x008C       [1]    TRISA
0x008E       [1]    TRISC
0x008E       [0]    TRISC5_bit
0x008E       [0]    TRISC4_bit
0x0092       [1]    PIE2
0x0099       [1]    OSCCON
0x009B       [1]    ADRESL
0x009C       [1]    ADRESH
0x009D       [0]    ADON_bit
0x009D       [1]    ADCON0
0x009D       [0]    GO_NOT_DONE_bit
0x009E       [1]    ADCON1
0x010C       [1]    LATA
0x010E       [1]    LATC
0x0111       [1]    CM1CON0
0x0112       [1]    CM1CON1
0x0118       [1]    DACCON0
0x0119       [1]    DACCON1
0x011D       [1]    APFCON0
0x018C       [1]    ANSELA
0x018E       [1]    ANSELC
0x0199       [1]    RCREG
0x019A       [1]    TXREG
0x019B       [2]    SPBRG
0x019C       [1]    SPBRGH
0x019D       [1]    RCSTA
0x019E       [1]    TXSTA
0x019F       [1]    BAUDCON
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x02A8      [16]    _STR_WELCOME
0x02B8      [16]    sendhex_hexnr_L0
//** Label List: ** 
//----------------------------------------------
  L_interrupt0
  L_absvalue1
  L_absvalue2
  L_sendchar3
  L_sendchar4
  L_sendchar5
  L_sendhex6
  L_sendhex7
  L_sendhex8
  L_sendhex9
  L_sendhex10
  L_sendhex11
  L_sendstring12
  L_sendstring13
  L_sendstring14
  L_sendstring15
  L_sendstring16
  L_main17
  L_main18
  L_main19
  L_main20
  L_main21
  L_main22
  L_main23
  L_main24
  L_main25
  L_main26
  L_main27
  L_main28
  L_main29
  L_main30
  L_main31
  L_main32
  L_main33
  L_main34
  L_main35
  L_main36
  L_main37
  L_main38
  L_main39
  L_end_interrupt
  _interrupt
  L__interrupt41
  L_end_absvalue
  _absvalue
  L__absvalue43
  L_end_sendchar
  _sendchar
  L_end_sendhex
  _sendhex
  L__sendhex46
  L__sendhex47
  L__sendhex48
  L__sendhex49
  L__sendhex50
  L_end_sendstring
  _sendstring
  L_end_main
  _main
  L__main53
  L__main54
  L__main55
  L__main56
  L__main57
  L__main58
  L__main59
  L__main60
  L__main61
  L_ADC_Get_Sample0
  L_ADC_Get_Sample1
  L_end_ADC_Init
  _ADC_Init
  L_end_ADC_Get_Sample
  _ADC_Get_Sample
  L_end_ADC_Read
  _ADC_Read
  L_Delay_1us0
  L_Delay_10us1
  L_Delay_22us2
  L_Delay_50us3
  L_Delay_80us4
  L_Delay_500us5
  L_Delay_5500us6
  L_Delay_1ms7
  L_Delay_5ms8
  L_Delay_8ms9
  L_Delay_10ms10
  L_Delay_100ms11
  L_Delay_1sec12
  L_boot16_Delay_5ms13
  L_Delay_Cyc14
  L_Delay_Cyc15
  L_VDelay_ms16
  L_VDelay_ms17
  L_VDelay_ms18
  L_VDelay_Advanced_ms19
  L_VDelay_Advanced_ms20
  L_VDelay_Advanced_ms21
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Delay_1us
  _Delay_1us
  L_end_Delay_10us
  _Delay_10us
  L_end_Delay_22us
  _Delay_22us
  L_end_Delay_50us
  _Delay_50us
  L_end_Delay_80us
  _Delay_80us
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_1sec
  _Delay_1sec
  L_end_boot16_Delay_5ms
  _boot16_Delay_5ms
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_VDelay_ms
  _VDelay_ms
  L__VDelay_ms39
  L__VDelay_ms40
  L__VDelay_ms41
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L__VDelay_Advanced_ms43
  L__VDelay_Advanced_ms44
  L__VDelay_Advanced_ms45
  L_UART1_Init0
  L_UART1_Init1
  L_UART1_Read2
  L_UART1_Write3
  L_UART1_Write4
  L_UART1_Write_Text5
  L_UART1_Write_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Read_Text13
  L_UART1_Read_Text14
  L_UART1_Read_Text15
  L_UART_Write_Text16
  L_UART_Write_Text17
  L_UART_Read_Text18
  L_UART_Read_Text19
  L_UART_Read_Text20
  L_UART_Read_Text21
  L_UART_Read_Text22
  L_UART_Read_Text23
  L_UART_Read_Text24
  L_UART_Read_Text25
  L_UART_Read_Text26
  L_end_UART1_Init
  _UART1_Init
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
  L_interrupt0
  L_absvalue1
  L_absvalue2
  L_sendchar3
  L_sendchar4
  L_sendchar5
  L_sendhex6
  L_sendhex7
  L_sendhex8
  L_sendhex9
  L_sendhex10
  L_sendhex11
  L_sendstring12
  L_sendstring13
  L_sendstring14
  L_sendstring15
  L_sendstring16
  L_main17
  L_main18
  L_main19
  L_main20
  L_main21
  L_main22
  L_main23
  L_main24
  L_main25
  L_main26
  L_main27
  L_main28
  L_main29
  L_main30
  L_main31
  L_main32
  L_main33
  L_main34
  L_main35
  L_main36
  L_main37
  L_main38
  L_main39
  L_end_interrupt
  _interrupt
  L__interrupt41
  L_end_absvalue
  _absvalue
  L__absvalue43
  L_end_sendchar
  _sendchar
  L_end_sendhex
  _sendhex
  L__sendhex46
  L__sendhex47
  L__sendhex48
  L__sendhex49
  L__sendhex50
  L_end_sendstring
  _sendstring
  L_end_main
  _main
  L__main53
  L__main54
  L__main55
  L__main56
  L__main57
  L__main58
  L__main59
  L__main60
  L__main61
